version: "1.0"
specification:
  name: s3
  summary: An S3 source and destination plugin for Conduit, written in Go.
  description: |-
    The S3 connector is one of [Conduit](https://github.com/ConduitIO/conduit)
    builtin plugins. It provides both, a source and a destination S3 connectors.

    ## Source

    The S3 Source Connector connects to a S3 bucket with the provided
    configurations, using `aws.bucket`, `aws.accessKeyId`,`aws.secretAccessKey` and
    `aws.region`. If the bucket doesn't exist, or the permissions fail, then an
    error will occur. After that, the `Open` method is called to start the
    connection from the provided position.

    ### Change Data Capture (CDC)

    This connector implements CDC features for S3 by scanning the bucket for changes
    every `pollingPeriod` and detecting any change that happened after a certain
    timestamp. These changes (update, delete, create) are then inserted into a
    buffer that is checked on each Read request.

    * To capture "delete" and "update", the S3 bucket versioning must be enabled.
    * To capture "create" actions, the bucket versioning doesn't matter.

    #### Position Handling

    The connector goes through two modes.

    * Snapshot mode: which loops through the S3 bucket and returns the objects that
      are already in there. The _Position_ during this mode is the object key
      attached to an underscore, an "s" for snapshot, and the _maxLastModifiedDate_
      found so far. As an example: "thisIsAKey_s12345", which makes the connector
      know at what mode it is and what object it last read. The
      _maxLastModifiedDate_ will be used when changing to CDC mode, the iterator
      will capture changes that happened after that.

    * CDC mode: this mode iterates through the S3 bucket every `pollingPeriod` and
      captures new actions made on the bucket. the _Position_ during this mode is
      the object key attached to an underscore, a "c" for CDC, and the object's
      _lastModifiedDate_ in seconds. As an example: "thisIsAKey_c1634049397". This
      position is used to return only the actions with a _lastModifiedDate_ higher
      than the last record returned, which will ensure that no duplications are in
      place.

    ### Record Keys

    The S3 object key uniquely identifies the objects in an Amazon S3 bucket, which
    is why a record key is the key read from the S3 bucket.

    ## Destination

    The S3 Destination Connector connects to an S3 bucket with the provided
    configurations, using `aws.bucket`, `aws.accessKeyId`,`aws.secretAccessKey` and
    `aws.region`. If the permissions fail, the connector will not be ready for
    writing to S3.

    ### Writer

    The S3 destination writer has a buffer with the size of `bufferSize`, for each
    time `Write` is called, a new record is added to the buffer. When the buffer is
    full, all the records from it will be written to the S3 bucket, and an ack
    function will be called for each record after being written.
  version: v0.9.1
  author: Meroxa, Inc.
  source:
    parameters:
      - name: aws.accessKeyId
        description: AWS access key id.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: aws.bucket
        description: the AWS S3 bucket name.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: aws.region
        description: the AWS S3 bucket region
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: aws.secretAccessKey
        description: AWS secret access key.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: pollingPeriod
        description: polling period for the CDC mode, formatted as a time.Duration string.
        type: duration
        default: 1s
        validations: []
      - name: prefix
        description: the S3 key prefix.
        type: string
        default: ""
        validations: []
      - name: sdk.batch.delay
        description: Maximum delay before an incomplete batch is read from the source.
        type: duration
        default: "0"
        validations: []
      - name: sdk.batch.size
        description: Maximum size of batch before it gets read from the source.
        type: int
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.schema.context.enabled
        description: |-
          Specifies whether to use a schema context name. If set to false, no schema context name will
          be used, and schemas will be saved with the subject name specified in the connector
          (not safe because of name conflicts).
        type: bool
        default: "true"
        validations: []
      - name: sdk.schema.context.name
        description: |-
          Schema context name to be used. Used as a prefix for all schema subject names.
          If empty, defaults to the connector ID.
        type: string
        default: ""
        validations: []
      - name: sdk.schema.extract.key.enabled
        description: Whether to extract and encode the record key with a schema.
        type: bool
        default: "false"
        validations: []
      - name: sdk.schema.extract.key.subject
        description: |-
          The subject of the key schema. If the record metadata contains the field
          "opencdc.collection" it is prepended to the subject name and separated
          with a dot.
        type: string
        default: key
        validations: []
      - name: sdk.schema.extract.payload.enabled
        description: Whether to extract and encode the record payload with a schema.
        type: bool
        default: "false"
        validations: []
      - name: sdk.schema.extract.payload.subject
        description: |-
          The subject of the payload schema. If the record metadata contains the
          field "opencdc.collection" it is prepended to the subject name and
          separated with a dot.
        type: string
        default: payload
        validations: []
      - name: sdk.schema.extract.type
        description: The type of the payload schema.
        type: string
        default: avro
        validations:
          - type: inclusion
            value: avro
  destination:
    parameters:
      - name: aws.accessKeyId
        description: AWS access key id.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: aws.bucket
        description: the AWS S3 bucket name.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: aws.region
        description: the AWS S3 bucket region
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: aws.secretAccessKey
        description: AWS secret access key.
        type: string
        default: ""
        validations:
          - type: required
            value: ""
      - name: format
        description: the destination format, either "json" or "parquet".
        type: string
        default: ""
        validations:
          - type: required
            value: ""
          - type: inclusion
            value: parquet,json
      - name: prefix
        description: the S3 key prefix.
        type: string
        default: ""
        validations: []
      - name: sdk.batch.delay
        description: Maximum delay before an incomplete batch is written to the destination.
        type: duration
        default: "0"
        validations: []
      - name: sdk.batch.size
        description: Maximum size of batch before it gets written to the destination.
        type: int
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.rate.burst
        description: |-
          Allow bursts of at most X records (0 or less means that bursts are not
          limited). Only takes effect if a rate limit per second is set. Note that
          if `sdk.batch.size` is bigger than `sdk.rate.burst`, the effective batch
          size will be equal to `sdk.rate.burst`.
        type: int
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.rate.perSecond
        description: Maximum number of records written per second (0 means no rate limit).
        type: float
        default: "0"
        validations:
          - type: greater-than
            value: "-1"
      - name: sdk.record.format
        description: |-
          The format of the output record. See the Conduit documentation for a full
          list of supported formats (https://conduit.io/docs/using/connectors/configuration-parameters/output-format).
        type: string
        default: opencdc/json
        validations: []
      - name: sdk.record.format.options
        description: |-
          Options to configure the chosen output record format. Options are normally
          key=value pairs separated with comma (e.g. opt1=val2,opt2=val2), except
          for the `template` record format, where options are a Go template.
        type: string
        default: ""
        validations: []
      - name: sdk.schema.extract.key.enabled
        description: Whether to extract and decode the record key with a schema.
        type: bool
        default: "true"
        validations: []
      - name: sdk.schema.extract.payload.enabled
        description: Whether to extract and decode the record payload with a schema.
        type: bool
        default: "true"
        validations: []
